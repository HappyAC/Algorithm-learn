 #include <cstring>
#include <cstdio>
#include <vector>
#include <stack>
using namespace std;

//5005 开邻接矩阵会爆内存,这里使用邻接表（用vector模拟）
const int maxn = 5005;
int min(int a,int b)
{
	if(a>b) return b;
	else return a;
}
int n,m;
int Stack[maxn];//模拟栈
int top = 0;
bool isInStack[maxn];//判断节点是否栈中
int dfn[maxn];//递归时序
int low[maxn];//最短递归时序
int ComponentNumber=0;        //有向图强连通分量个数
int Index=0;                 //索引号
vector <int> Edge[maxn];        //邻接表表示
int CCount[maxn]; //每个强连通分量顶点个数

void Tarjan(int i)
{
    int j;
    dfn[i] = low[i] = Index++;
    isInStack[i] = true;
    Stack[++top] = i;//结点入栈
    int e;
    for (e = 0; e < Edge[i].size(); e++)
    {
        j = Edge[i][e];
        if (dfn[j] == -1)
        {
            Tarjan(j);
            low[i] = min(low[i],low[j]);
        }
        else if (isInStack[j])
        {
            low[i] = min(low[i],dfn[j]);
        }
    }
    if (dfn[i] == low[i])
    {
        ComponentNumber++;
        do
        {
            j=Stack[top--];
            isInStack[j] = false;
            CCount[ComponentNumber] ++;//统计ComponentNumber分量内的顶点数
        }
        while (j != i);
    }
}

void solve(int n)
{
    for(int i = 1;i <= n; i++)
    {
        if(dfn[i] == -1)
        {
            Tarjan(i);
        }
    }
}

void initData()
{
    for (int i = 0; i <=n; i++)
    {
        Edge[i].clear();
    }
    fill(Stack,Stack+maxn,-1);
    fill(isInStack,isInStack+maxn,0);
    fill(dfn,dfn+maxn,-1);
    fill(low,low+maxn,-1);
    fill(CCount,CCount+maxn, 0);
    Index = 0;
    ComponentNumber = 0;
    top = 0;
}

int main()
{
	int t,i;
    scanf("%d", &t);
    while (t--)
    {
        scanf("%d%d",&n,&m);
        initData();
        for (i = 0; i < m; i++)
        {
            int a,b;
            scanf("%d%d",&a,&b);
            Edge[a].push_back(b);
        }
        solve(n);
        int res = 1;
        for (i = 1; i <= ComponentNumber; i++)
        {
            if (res <= CCount[i])
            {
                res = CCount[i];
            }
        }
        printf("%d\n",res);
    }
    
    return 0;
}