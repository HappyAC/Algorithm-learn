const int N = 80;

int p[N];	// 记录变换的目标
int F[N];

string s,t;

bool calCycle(int pos, int &start, int &cycle)        //    计算周期
{
	F[0]=pos;    	// 初值
	bool found=false;    

	for(int i=1; found==false; i++) // 计算周期
	{
		int tmp=p[F[i-1]];			// 变换i轮次后，第pos元素应该出现的位置
		for(int j=0; j<i && found==false; j++)
		{
			if(F[j]==tmp)
			{
				found=true;
				cycle=i-j;
				start=j;
			}
		}

		// 当前数据还未出现，则加入数组
		if(found==false) F[i]=tmp;
	}

	if(found==false) 
		return false;
	else 
		return true;
}