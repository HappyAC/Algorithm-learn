 #include<string>
#include<iostream>
#include<algorithm>
#include <vector> 
#include<iomanip>
using namespace std;
const int MaxLen = 100000;
const int DIGIT = 4;        // 一个元素存放4位十进制数
const int MOD =    10000;        
typedef int BigInt[MaxLen];    // 下标0放长度, 数据：低位在前,高位在后
 int n;
// 高精度赋值
void give(BigInt a, BigInt& b)
{
    int i = 0;
    while(i<=a[0])
    {
        b[i] = a[i];
        i++;
    }
}

// 将普通整数变成高精度，0的表达：b[0]=1; b[1]=0;
void give(int a, BigInt& b)
{
    b[1] = a%MOD;
    a /= MOD;
    
    int pos=2;
    while(a>0)
    {
        b[pos++] = a%MOD;
        a /= MOD;
    }
    b[0]=pos-1;
} 

// 高精度相加 c=a+b
void BigAdd(BigInt a, BigInt b, BigInt& c)
{
    int i,carry=0;
    for (i=1; i<=a[0] || i<=b[0] || carry>0; i++)
    {
        if(i<=a[0]) carry += a[i];
        if(i<=b[0]) carry += b[i];
        c[i] = carry%MOD;
        carry /= MOD;
    }
    c[0] = i-1;
}

// 高精乘单精c=a*b, 一位大整数乘法, 注意:b*a[i] 应小于int型范围,否则用64位整数保存carry
void BigMulSimple(BigInt a, int b, BigInt& c)
{
    int i, carry=0;
    for(i=1; i<=a[0] || carry>0; i++)
    {
        if(i<=a[0]) carry += b*a[i];
        c[i] = carry%MOD;
        carry /= MOD;
    }
    c[0] = i-1;
}

// 大数乘法c=a*b
void BigMul(const BigInt a, const BigInt b, BigInt& c) 
{
    fill(c,c+MaxLen,0); // 这条语句要求 a,c 不能是同一个变量

    int i,j;
    for (i=1; i<=a[0]; i++)
    {
        int carry=0;
        for (j=1; j<=b[0] || carry>0; j++)
        {
            carry += c[i+j-1];
            if(j<=b[0]) carry += a[i]*b[j];
            c[i+j-1] = carry%MOD;
            carry /= MOD;
        }
    }

    c[0]=a[0]+b[0]; 
    while(c[c[0]]==0 && c[0]>1) c[0]--;
}

// 大数除法，其中a是高精，b是单精
// c= a/b; d=a%b;
void BigDiv(BigInt a, int b, BigInt& c, int& d)
{
    int i;
    d=0;
    for(i = a[0]; i>=1 ; i--)
    {
        d = d*MOD + a[i];
        c[i] = d/b;
        d = d%b;
    }
    i = a[0];
    while(i>1 && c[i]==0) i--;
    c[0] = i;
}
 
// 输出高精
void output(const BigInt a)
{
    printf("%d",a[a[0]]);
    for (int i=a[0]-1; i>0; i--)
    {
        for(int j=MOD/10; j>0; j/=10)
        {
            printf("%d",a[i]/j%10);
        }
    }
}
void run()
{    
    BigInt a;
    a[0]=1;
    a[1]=1;
    int i;
    for(i=1;i<=n;i++)
    {
        BigMulSimple(a, i,a);
    }
    output(a);
    cout<<endl;
}
int main()
{
    while(cin>>n)
    {
        run();
    }
    return 0;
}