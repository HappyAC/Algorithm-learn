
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
#include <cassert>
#include <complex>
using namespace std;

const int N=10005;
int n,m,num[N],p[N],sum,ans;
bool vis[N];
vector<int>Edge[N];
int non[N];

int Min(int a, int b)
{
    if(a>b) return b;
    return a;
}
int Stack[N];//模拟栈
int top = 0;
bool isInStack[N];//判断节点是否栈中
int dfn[N];//递归时序
int low[N];//最短递归时序
int ComponentNumber=0;        //有向图强连通分量个数
int Index=0;                 //索引号
int CCount[N]; //每个强连通分量顶点个数

void Tarjan(int i,int father)
{
    int j;
    dfn[i] = low[i] = Index++;
    isInStack[i] = true;
    Stack[++top] = i;//结点入栈
    int e;
	bool flag=1;
    for (e = 0; e < Edge[i].size(); e++)
    {
        j = Edge[i][e];
		if(j == father && flag)
		{
			flag = 0;
			continue;
		}
        if (dfn[j] == -1)
        {
            Tarjan(j,i);
            low[i] = min(low[i],low[j]);
        }
        else if (isInStack[j])
        {
            low[i] = min(low[i],dfn[j]);
        }
    }
    if (dfn[i] == low[i])
    {
        ComponentNumber++;
        do
        {
            j=Stack[top--];
			non[j]=ComponentNumber;
            isInStack[j] = false;
            CCount[ComponentNumber] ++;//统计ComponentNumber分量内的顶点数
        }
        while (j != i);
    }
}

void solve(int n)
{
    for(int i = 0;i < n; i++)
    {
        if(dfn[i] == -1)
        {
            Tarjan(i,-1);
        }
    }
}
void initData()
{
    for (int i = 0; i <=n; i++)
    {
        Edge[i].clear();
	}
    fill(Stack,Stack+N,-1);
    fill(isInStack,isInStack+N,0);
    fill(dfn,dfn+N,-1);
    fill(low,low+N,-1);
    fill(CCount,CCount+N, 0);
    Index = 0;
    ComponentNumber = 0;
    top = 0;

}

void dfs(int u)
{
    vis[u]=1;
    int t=num[u];
    for(int i=0;i<Edge[u].size();i++)
    {
        int v=Edge[u][i];
        if(!vis[v]) 
        {
            dfs(v);
            t+=p[v];
            if(non[u] != non[v])
                if(abs(sum-p[v]*2)<ans) ans=abs(sum-p[v]*2);
        }
    }
    p[u]=t;
}

int main() 
{
    while(scanf("%d%d",&n,&m)!=EOF)
    {
        initData();
        sum=0;
        for(int i=0;i<n;i++) 
        {
            scanf("%d",&num[i]);
            sum+=num[i];
        }
        for(int i=0;i<m;i++)
        {
            int a,b;
            scanf("%d%d",&a,&b);
            Edge[a].push_back(b);
            Edge[b].push_back(a);
        }
        fill(non,non+N,0);
        solve(n);
        if(ComponentNumber==1)
        {
            printf("impossible\n");
            continue;
        }
        fill(vis,vis+N,0);
        ans=INT_MAX;
        dfs(0);
        printf("%d\n",ans);
    }
    return 0;
}